<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_what_youll_build">What you&#8217;ll build</a></li>
<li><a href="#_what_youll_need">What you&#8217;ll need</a></li>
<li><a href="#_lets_get_started">Let&#8217;s get started</a></li>
<li><a href="#_arkane_connect_dependency">Arkane-connect dependency</a></li>
<li><a href="#_authenticating">Authenticating</a>
<ul class="sectlevel2">
<li><a href="#_check_if_authenticated">Check if authenticated</a></li>
<li><a href="#_handling_the_authentication_outcome">Handling the authentication outcome</a></li>
<li><a href="#_login_logout">Login / Logout</a></li>
</ul>
</li>
<li><a href="#_fetch_the_users_wallets">Fetch the user&#8217;s wallets</a></li>
<li><a href="#_manage_wallets">Manage Wallets</a></li>
<li><a href="#_show_wallet_details">Show wallet details</a></li>
<li><a href="#_show_transaction_form">Show transaction form</a></li>
<li><a href="#_executing_the_transaction">Executing the transaction</a></li>
<li><a href="#_summary">Summary</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This guide will walk you trough the process of creating a multi blockchain wallet, able to transfer native coins and tokens to any address specified.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_youll_build">What you&#8217;ll build</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We&#8217;ll build a page which will:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Authenticate the user using the Arkane Connect authentication provider</p>
</li>
<li>
<p>Fetch a list of the user&#8217;s wallets</p>
</li>
<li>
<p>Enable the user to manage his wallets connected to our application</p>
</li>
<li>
<p>Fetch the token balances of the selected wallet</p>
</li>
<li>
<p>Execute a transaction, from the selected wallet to a specified address</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_youll_need">What you&#8217;ll need</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>A text editor or IDE</p>
</li>
<li>
<p>Git (<a href="https://git-scm.com/downloads">Download</a>)</p>
</li>
<li>
<p>Node &amp; npm (<a href="https://www.npmjs.com/get-npm">Download</a>)</p>
</li>
<li>
<p>A minimal understanding of jQuery (We will be using jQuery to perform DOM manipulations).</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lets_get_started">Let&#8217;s get started</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We&#8217;ll start by setting up our development environment. Open a terminal window, checkout the <a href="https://github.com/ArkaneNetwork/Arketype">sample project</a>, called Arketype, from GitHub, go to the <code>js-multi-chain-wallet-initial</code> branch and run <code>npm install</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">git clone https://github.com/ArkaneNetwork/Arketype.git
cd Arketype
git checkout js-multi-chain-wallet-initial
npm install</code></pre>
</div>
</div>
<div class="paragraph">
<p>This will set us up with a small project that contains the necessary HTML, CSS and configuration files. You can already run the application by executing <code>npm run start</code>.</p>
</div>
<div class="paragraph">
<p>At the moment the application isn&#8217;t doing much, so let&#8217;s go ahead and implement the JavaScript.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_arkane_connect_dependency">Arkane-connect dependency</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before we can actually start writing the JavaScript, we need to add <a href="https://www.npmjs.com/package/@arkane-network/arkane-connect">Arkane Connect</a> as a dependency to our project. To do this, open up <code>package.json</code> and add <code>"@arkane-network/arkane-connect": "latest"</code> to the <code>dependencies</code> section.</p>
</div>
<div class="listingblock">
<div class="title">/package.json</div>
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">"dependencies": {
  "@arkane-network/arkane-connect": "latest", <i class="conum" data-value="1"></i><b>(1)</b>
  "jquery": "^3.3.1"
},</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The Arkane Connect dependency</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>After this is done, rerun <code>npm install</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">npm install</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we can add <code>connect.js</code> to our application by adding it in the <code>&lt;head&gt;</code> section of <code>/public/index.html</code>.</p>
</div>
<div class="listingblock">
<div class="title">/public/index.html</div>
<div class="content">
<pre class="highlight"><code class="language-html" data-lang="html">&lt;head&gt;
  ...
  &lt;link rel="stylesheet" href="/assets/css/arketype.css"/&gt;

  &lt;script src="/node_modules/@arkane-network/arkane-connect/connect.js"&gt;&lt;/script&gt; <i class="conum" data-value="1"></i><b>(1)</b>
&lt;/head&gt;
...</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Adding Arkane Connect to the HTML page</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>After adding it in our HTML, we can create an <code>ArkaneConnect</code> instance. In <code>./public/assets/js/main.js</code> add the following snippet:</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">var app = app || {};

app.initApp = function() {
  window.arkaneConnect = new ArkaneConnect('Arketype', { environment: 'staging'});
};

app.initApp();</code></pre>
</div>
</div>
<div class="paragraph">
<p>By adding this snippet, we will create an ArkaneConnect instance that will connect to the Arkane staging environment (for production, you can just omit the <code>environment</code> property).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_authenticating">Authenticating</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this guide, we&#8217;re going to use the authentication client baked into Arkane Connect. This client will authenticate against the Arkane Connect authentication provider and then store (and refresh when needed) the bearer token necessary for any call to Arkane.</p>
</div>
<div class="sect2">
<h3 id="_check_if_authenticated">Check if authenticated</h3>
<div class="paragraph">
<p>The first thing we&#8217;ll want to do is check if the user is already authenticated.</p>
</div>
<div class="paragraph">
<p>In the snippet below, you can see that the <code>checkAuthenticated()</code> function is called. This will redirect the user to our authentication provider, were it will check if the user is authenticated and redirect back to our original page passing an authentication result.</p>
</div>
<div class="paragraph">
<p>The outcome of calling this function is a Promise containing an authentication result, which contains two callback methods <code>authenticated((auth) =&gt; { ... });</code> and <code>notAuthenticated((auth) =&gt; { ... });</code>.</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">...
app.initApp = async function() {
  window.arkaneConnect = new ArkaneConnect('Arketype', { environment: 'staging'}); <i class="conum" data-value="1"></i><b>(1)</b>
  try {
    const authenticationResult = await window.arkaneConnect.checkAuthenticated(); <i class="conum" data-value="2"></i><b>(2)</b>
    authenticationResult.authenticated((auth) =&gt; {
      console.log("This user is authenticated", auth); <i class="conum" data-value="3"></i><b>(3)</b>
    })
    .notAuthenticated((auth) =&gt; {
      console.log("This user is not authenticated", auth); <i class="conum" data-value="4"></i><b>(4)</b>
    });
  }
  catch (reason) {
      console.error(reason);
  }
};

app.initApp();</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Added <code>async</code> to the function to be able to use <code>await</code></td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Checking if the user is authenticated</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Handeling the user is authenticated</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Handeling the user is not authenticated</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_handling_the_authentication_outcome">Handling the authentication outcome</h3>
<div class="paragraph">
<p>Let&#8217;s make the authentication outcome determine if the user sees a 'Login'-link or the wallet application.</p>
</div>
<div class="paragraph">
<p>We&#8217;ll extend the authenticated handler so that it adds the <code>logged-in</code> class to the <code>&lt;body&gt;</code> element of our page. This will let the CSS in <code>/public/assets/css/auth.css</code> handle the displaying and hiding of the correct section.</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">...
try {
  const authenticationResult = await window.arkaneConnect.checkAuthenticated();
  authenticationResult.authenticated((auth) =&gt; {
    console.log("This user is authenticated", auth);
    document.body.classList.add('logged-in'); <i class="conum" data-value="1"></i><b>(1)</b>
    $('#auth-username').text(auth.idTokenParsed.name); <i class="conum" data-value="2"></i><b>(2)</b>
  })
  .notAuthenticated((auth) =&gt; {
    console.log("This user is not authenticated", auth);
  });
}
...</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Adding the <code>logged-in</code> class</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Displaying the logged in user&#8217;s name</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_login_logout">Login / Logout</h3>
<div class="paragraph">
<p>Next we&#8217;ll want to allow the user to authenticate when he clicks the login-link and log out when he calls the logout-link.</p>
</div>
<div class="paragraph">
<p>We&#8217;ll do this by adding 'click' event listeners to the bottom of our script. These will handle a click by calling the <code>arkaneConnect.authenticate()</code> or <code>arkaneConnect.logout()</code> respectively.</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">...
app.initApp();

document.getElementById('auth-loginlink').addEventListener('click', function(e) {
  e.preventDefault();
  window.arkaneConnect.authenticate(); <i class="conum" data-value="1"></i><b>(1)</b>
});

document.getElementById('auth-logout').addEventListener('click', function(e) {
  e.preventDefault();
  window.arkaneConnect.logout(); <i class="conum" data-value="2"></i><b>(2)</b>
});</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Authenticate the user</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Log the user out</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>That&#8217;s it, we&#8217;ve now integrated the authentication client of Arkane Connect. It checks if we&#8217;re authenticated and displays a login- / logout-link when appropriate. If you want to see it in action go ahead and run <code>npm run start</code> and surf to <a href="http://localhost:4000" class="bare">http://localhost:4000</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">npm run start</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fetch_the_users_wallets">Fetch the user&#8217;s wallets</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We can fetch the user&#8217;s wallets using the Arkane Connect API which can be accessed by calling <code>arkaneConnect.api</code>. This API is a JavaScript proxy to the HTTP endpoints exposed on <a href="https://api.arkane.network" class="bare">https://api.arkane.network</a>. Documentation on the endoints can be found <a href="https://api.arkane.network/docs/index.html">here</a>. By using the Arkane Connect API, you don&#8217;t have to construct and execute the HTTP calls yourself.</p>
</div>
<div class="paragraph">
<p>For this example we&#8217;ll extend the <code>authenticated(&#8230;&#8203;)</code> handler so that it fetches the user&#8217;s wallets right after he logs in, convert the array to a map (where the key is <code>id</code>), store the map in local storage and populate the wallets <code>&lt;select&gt;</code> with them.</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">...
try {
  const authenticationResult = await window.arkaneConnect.checkAuthenticated();

  authenticationResult.authenticated(async (auth) =&gt; { <i class="conum" data-value="1"></i><b>(1)</b>
    console.log("This user is authenticated", auth);
    document.body.classList.add('logged-in');
    $('#auth-username').text(auth.idTokenParsed.name);

    try {
        const wallets = await window.arkaneConnect.api.getWallets(); <i class="conum" data-value="2"></i><b>(2)</b>
        const walletsMap = app.convertArrayToMap(wallets, 'id'); <i class="conum" data-value="3"></i><b>(3)</b>
        localStorage.setItem('wallets', JSON.stringify(walletsMap)); <i class="conum" data-value="4"></i><b>(4)</b>
        app.populateWalletsSelect(wallets); <i class="conum" data-value="5"></i><b>(5)</b>
    }
    catch (err) {
        console.error('Something went wrong while fetching the user\'s wallets');
    }
  })
  .notAuthenticated((auth) =&gt; {
    console.log("This user is not authenticated", auth);
  });
}
...

// Below the app.initApp(...) function //
...
app.convertArrayToMap = (array, key) =&gt; {
  return array.reduce((obj, item) =&gt; {
    obj[item[key]] = item;
    return obj;
  }, {});
};

app.populateWalletsSelect = (wallets) =&gt; {
  const walletsSelect = $('#wallets-select');
  wallets.forEach((wallet) =&gt; {
    walletsSelect.append($('&lt;option&gt;', { value : wallet.id }).text(wallet.address));
  });
};
...</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Added <code>async</code> to the function to be able to use <code>await</code></td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Fetch the wallets using the Arkane Connect API</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Convert the array of wallets to a map with 'id' as key</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Store the map of wallets in local storage</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Populate the wallets <code>&lt;select&gt;</code></td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_manage_wallets">Manage Wallets</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The first time a user enters our sample application, he will need to give our our application access to at least one of his wallets. To do this we will launch Arkane Connect’s <code>Manage wallets</code> page.<br>
This page displays all the user’s wallets for a specified blockchain and allows him to give our application access to one or more. Additionally he has the ability to create a new, or import an existing wallet.</p>
</div>
<div class="paragraph">
<p>To redirect the user to the <code>Manage wallets</code> page, we need to call <code>arkaneConnect.manageWallets(&lt;blockchain&gt;)</code>. Let’s do this right after we’ve gotten the user’s wallets. If no wallets are returned, we’ll redirect the user to the manage wallets page (for Ethereum wallets).</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">...
try {
  const wallets = await window.arkaneConnect.api.getWallets();
  if (wallets.length &gt; 0) { <i class="conum" data-value="1"></i><b>(1)</b>
    const walletsMap = app.convertArrayToMap(wallets, 'id');
    localStorage.setItem('wallets', JSON.stringify(walletsMap));
    app.populateWalletsSelect(wallets);
  } else {
    window.arkaneConnect.manageWallets('ETHEREUM'); <i class="conum" data-value="2"></i><b>(2)</b>
  }
}
...</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Check if the user already has wallets linked to our application</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>If no wallets are linked, redirect the user to the <code>Manage wallets</code> page (for Ethereum)</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>We&#8217;ll also want <code>Manage wallets</code> links so that the user can go to the page without being automatically redirected somehow. To do this, we&#8217;ll add 'click' event listeners to the links already on the page, which will redirect the user to the <code>Manage wallets</code> page for the correct blockchain.</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">// At the bottom of the file //
...
document.getElementById('manage-eth-wallets').addEventListener('click', function(event) {
  event.preventDefault();
  window.arkaneConnect.manageWallets('ETHEREUM'); <i class="conum" data-value="1"></i><b>(1)</b>
});

document.getElementById('manage-vechain-wallets').addEventListener('click', function(event) {
  event.preventDefault();
  window.arkaneConnect.manageWallets('VECHAIN'); <i class="conum" data-value="2"></i><b>(2)</b>
});</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Manage Ethereum wallets</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Manage VeChain wallets</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_show_wallet_details">Show wallet details</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When the user selects a wallet we would like to show some details.</p>
</div>
<div class="paragraph">
<p>First, we&#8217;re going to populate and show <code>wallet-balance</code> and <code>wallet-gas-balance</code> when the <code>&lt;select&gt;</code> value changes, by adding a 'change' event listener on <code>wallets-select</code></p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">// At the bottom of the file //
...

document.getElementById('wallets-select').addEventListener('change', function(event) {
  event.preventDefault();
  if(event.target.value) {
    const wallets = JSON.parse(localStorage.getItem('wallets')); <i class="conum" data-value="1"></i><b>(1)</b>
    const wallet = wallets[event.target.value]; <i class="conum" data-value="1"></i><b>(1)</b>
    const balance = wallet.balance; <i class="conum" data-value="1"></i><b>(1)</b>
    $('#wallet-balance').html(`${balance.balance} ${balance.symbol}`); <i class="conum" data-value="2"></i><b>(2)</b>
    $('#wallet-gas-balance').html(`${balance.gasBalance} ${balance.gasSymbol}`); <i class="conum" data-value="3"></i><b>(3)</b>
    $('#wallet-details').removeClass('hidden');
  }
  else {
    $('#wallet-details').addClass('hidden');
  }
});</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Fetching the wallet (+ balance) from localStorage</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Displaying the tokens balance</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Displaying the gas balance</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Next we would like to show the tokens that are available for this wallet, we  can do this by extending the 'change' event listener with  <code>arkaneConnect.api.getTokenBalances(walletId)</code>, which will fetch the token balances.</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">document.getElementById('wallets-select')
        .addEventListener('change', async function(event) { <i class="conum" data-value="1"></i><b>(1)</b>
  event.preventDefault();
  if (event.target.value) {
    const wallets = JSON.parse(localStorage.getItem('wallets'));
    const wallet = wallets[event.target.value];
    $('#wallet-balance').html(`${wallet.balance.balance} ${wallet.balance.symbol}`);
    $('#wallet-gas-balance').html(`${wallet.balance.gasBalance} ${wallet.balance.gasSymbol}`);

    const tokenBalances = await window.arkaneConnect.api.getTokenBalances(wallet.id); <i class="conum" data-value="2"></i><b>(2)</b>
    $('#wallet-tokens').html(tokenBalances.map(
      (tokenBalance) =&gt; `${tokenBalance.balance} ${tokenBalance.symbol}`).join('&lt;br/&gt;') <i class="conum" data-value="3"></i><b>(3)</b>
    );

    $('#wallet-details').removeClass('hidden');
  }
  else {
    $('#wallet-details').addClass('hidden');
  }
});</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Making the callback function <code>async</code> so that we can use <code>await</code></td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Fetching the tokens balance for our wallet</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Displaying the tokens balance</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_show_transaction_form">Show transaction form</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The main feature of our multi-chain wallet is the transaction functionality. In <code>/public/index.html</code> there is already a form present. We&#8217;re going to extend <code>wallets-select</code> 'change' event listener so that it pre-fills the walletId and populates a <code>&lt;select&gt;</code> to select the token the user wants to transfer.</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">...
  $('#wallet-details').removeClass('hidden');

  $('#transaction-from').val(wallet.id); <i class="conum" data-value="1"></i><b>(1)</b>
  $('#secret-type').val(wallet.secretType); <i class="conum" data-value="2"></i><b>(2)</b>
  app.preFillTransactionTokens(wallet, tokenBalances); <i class="conum" data-value="3"></i><b>(3)</b>
  $('#transaction').removeClass('hidden');
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Pre-filling the wallet id</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Pre-filling the secretType (AKA the type of blockchain)</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Pre-filling the tokens</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>To make it work, we&#8217;ll also need to add the code of the <code>app.preFillTransactionTokens(&#8230;&#8203;)</code> function.</p>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">...
app.preFillTransactionTokens = (wallet, tokenBalances) =&gt; {
    const transactionTokens = $('#transaction-token');
    transactionTokens.empty();
    transactionTokens.append($('&lt;option&gt;', {value: ''}).text(wallet.balance.symbol));
    tokenBalances.forEach((tokenBalance) =&gt; {
        transactionTokens.append(
            $('&lt;option&gt;', {value: tokenBalance.tokenAddress}).text(tokenBalance.symbol)
        );
    });
};
...</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_executing_the_transaction">Executing the transaction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To wrap things up, we&#8217;ll want to execute a transaction. Using Arkane Connect, this is done by creating a new <code>Signer</code> via <code>arkaneConnect.createSigner()</code> and then calling its <code>signer.executeTransaction(genericTransactionRequest)</code> function.</p>
</div>
<div class="paragraph">
<p>We&#8217;ll implement this by adding a <code>submit</code> event listener on the form to process the transaction.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
If you&#8217;re executing a transaction in an event handler (as in the example below), create the signer at the very beginning of your listener function. Otherwise the popup blocker of the browser might block the signer popup.
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="title">/public/assets/js/main.js</div>
<div class="content">
<pre class="highlight"><code class="language-javascript" data-lang="javascript">// At the bottom of the file //
...

document.getElementById('transaction-form').addEventListener('submit', async (e) =&gt; {
  e.preventDefault();
  const signer = window.arkaneConnect.createSigner(); <i class="conum" data-value="1"></i><b>(1)</b>

  try {
    const transactionResult = await signer.executeTransaction( <i class="conum" data-value="2"></i><b>(2)</b>
      {
        walletId: $("#transaction-form input[name='from']").val(), <i class="conum" data-value="3"></i><b>(3)</b>
        to: $("#transaction-form input[name='to']").val(), <i class="conum" data-value="3"></i><b>(3)</b>
        value: ($("#transaction-form input[name='amount']").val()), <i class="conum" data-value="3"></i><b>(3)</b>
        secretType: $("#transaction-form input[name='secretType']").val(), <i class="conum" data-value="3"></i><b>(3)</b>
        tokenAddress: $("#transaction-form select[name='tokenAddress']").val(), <i class="conum" data-value="3"></i><b>(3)</b>
      }
    );
    console.log(transactionResult.result.transactionHash);  <i class="conum" data-value="4"></i><b>(4)</b>
  }
  catch (reason) {
    console.error(reason);
  }
});</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Creating the signer instance (+ opening the popup)</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Execute the transaction</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Passing the form data</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Logging the transactionHash to the console</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_summary">Summary</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Congratulations! You&#8217;ve just built a fully functional multi-chain wallet.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s an overview of what we&#8217;ve covered:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>We integrated the Arkane Connect authentication client</p>
</li>
<li>
<p>We fetched a user&#8217;s Arkane wallets</p>
</li>
<li>
<p>We enabled the user to manage the wallets connected to our application</p>
</li>
<li>
<p>We fetched a wallet&#8217;s tokens balance</p>
</li>
<li>
<p>We enabled the user to execute a transaction from one of his wallets</p>
</li>
</ul>
</div>
</div>
</div>